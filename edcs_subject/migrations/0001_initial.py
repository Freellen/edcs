# Generated by Django 4.2 on 2024-01-29 18:00

import _socket
from django.conf import settings
import django.contrib.sites.managers
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edcs_model.fields.other_charfield
import edcs_model.models.fields.other_charfield
import edcs_model.models.validators.date
import edcs_protocol.validators
import edcs_subject.models.subject_visit
import edcs_utils.date
import edcs_visit_schedule.managers
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("edcs_lists", "0001_initial"),
        ("sites", "0002_alter_domain_unique"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("edcs_appointment", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SubjectVisit",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("subject_identifier", models.CharField(max_length=50)),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "visit_schedule_name",
                    models.CharField(
                        editable=False,
                        help_text='the name of the visit schedule used to find the "schedule"',
                        max_length=25,
                    ),
                ),
                ("schedule_name", models.CharField(editable=False, max_length=25)),
                ("visit_code", models.CharField(editable=False, max_length=25, null=True)),
                (
                    "visit_code_sequence",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)",
                        null=True,
                        verbose_name="Sequence",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of this report",
                        validators=[
                            edcs_protocol.validators.datetime_not_before_study_start,
                            edcs_model.models.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "reason_unscheduled_other",
                    edcs_model.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If the reason for the unscheduled visit is "other", specify',
                    ),
                ),
                (
                    "reason_missed",
                    models.CharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If 'missed', provide the reason for the missed visit",
                    ),
                ),
                (
                    "reason_missed_other",
                    edcs_model.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If the reason for the missed visit is "other", specify',
                    ),
                ),
                (
                    "study_status",
                    models.CharField(
                        max_length=50,
                        null=True,
                        verbose_name="What is the participant's current study status",
                    ),
                ),
                (
                    "require_crfs",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        max_length=10,
                        verbose_name="Are scheduled data being submitted with this visit?",
                    ),
                ),
                (
                    "info_source_other",
                    edcs_model.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name='If "Other" source of information, specify',
                    ),
                ),
                (
                    "survival_status",
                    models.CharField(
                        choices=[
                            ("alive", "Alive"),
                            ("dead", "Deceased"),
                            ("unknown", "Unknown"),
                        ],
                        default="alive",
                        max_length=10,
                        null=True,
                        verbose_name="Participant's survival status",
                    ),
                ),
                (
                    "last_alive_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edcs_protocol.validators.date_not_before_study_start,
                            edcs_model.models.validators.date.date_not_future,
                        ],
                        verbose_name="Date participant last known alive",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="Comment if any additional pertinent information about the participant",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled visit (study)"),
                            ("unscheduled", "Routine / Unscheduled visit (non-study)"),
                            ("missed", "Missed visit"),
                        ],
                        max_length=25,
                        verbose_name="What is the reason for this visit report?",
                    ),
                ),
                (
                    "reason_unscheduled",
                    models.CharField(
                        choices=[
                            ("routine_non_study", "Routine appointment (non-study)"),
                            ("patient_unwell_outpatient", "Patient unwell"),
                            ("drug_refill", "Drug refill only"),
                            ("OTHER", "Other"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If 'unscheduled', provide reason for the unscheduled visit",
                    ),
                ),
                (
                    "clinic_services_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "info_source",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            (
                                "patient_and_outpatient",
                                "Patient, hospital notes and/or outpatient card",
                            ),
                            (
                                "patient_representive",
                                "Patient Representative (e.family member, friend)",
                            ),
                            ("hospital_notes", "Hospital notes"),
                            ("outpatient_cards", "Outpatient cards"),
                            (
                                "collateral_history",
                                "Collateral History from relative/guardian",
                            ),
                            ("N/A", "Not applicable"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="What is the main source of this information?",
                    ),
                ),
                (
                    "appointment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edcs_appointment.appointment",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
            ],
            options={
                "ordering": (
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "visit_code",
                    "visit_code_sequence",
                    "report_datetime",
                ),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
            },
            managers=[
                ("on_site", edcs_subject.models.subject_visit.CurrentSiteManager()),
                ("objects", edcs_visit_schedule.managers.VisitModelManager()),
            ],
        ),
        migrations.CreateModel(
            name="RespiratorySample",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "respiratory_sample",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Is at least one respiratory sample available?",
                    ),
                ),
                (
                    "respiratory_sample_yes",
                    models.CharField(
                        choices=[("one", "One"), ("two", "Two"), ("three", "Three")],
                        max_length=45,
                        verbose_name="If yes, How many?",
                    ),
                ),
                (
                    "respiratory_sample_no",
                    models.CharField(
                        choices=[
                            ("sample_lost ", "sample lost "),
                            ("leaking_container", "Leaking container"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="If No, reason?",
                    ),
                ),
                (
                    "respiratory_sample_no_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "respiratory_sample1_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date sample(1) collected"
                    ),
                ),
                (
                    "respiratory_sample2_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date sample(2) collected"
                    ),
                ),
                (
                    "respiratory_sample3_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date sample(3) collected"
                    ),
                ),
                (
                    "sample_lab_receive_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date sample(s) received in the laboratory",
                    ),
                ),
                (
                    "sputum_respiratory_sample",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Sputum sample(s) received?"
                    ),
                ),
                (
                    "nga_respiratory_sample",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="NGA sample(s) received?"
                    ),
                ),
                (
                    "appearance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("watery_salivary", "Watery/salivary"),
                            ("mucoid", "Mucoid"),
                            ("purulent", "Purulent"),
                            ("bloody", "Bloody"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="Appearance",
                    ),
                ),
                (
                    "sample_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="in mL",
                        max_digits=6,
                        null=True,
                        verbose_name="Approximate volume sample?",
                    ),
                ),
                (
                    "accession_status",
                    models.CharField(
                        choices=[("accepted", "Accepted"), ("rejected", "Rejected")],
                        max_length=45,
                        verbose_name="Sample accession status?",
                    ),
                ),
                (
                    "afb_microscopy_date_a",
                    models.DateField(
                        blank=True, null=True, verbose_name="AFB microscopy Date?"
                    ),
                ),
                (
                    "afb_technique_a",
                    models.CharField(
                        blank=True,
                        choices=[("ZN", "ZN"), ("FM", "FM")],
                        max_length=45,
                        null=True,
                        verbose_name="AFB technique?",
                    ),
                ),
                (
                    "afb_result_a",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no_AFB_seen", "no AFB seen"),
                            ("AFB_seen_scanty", "AFB seen, scanty"),
                            ("AFB_Seen_plus1", "AFB Seen , +1"),
                            ("AFB_Seen_plus2", "AFB Seen , +2"),
                            ("AFB_Seen_plus3", "AFB Seen , +3"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Results A?",
                    ),
                ),
                (
                    "afb_microscopy_date_b",
                    models.DateField(
                        blank=True, null=True, verbose_name="AFB microscopy Date?"
                    ),
                ),
                (
                    "afb_technique_b",
                    models.CharField(
                        blank=True,
                        choices=[("ZN", "ZN"), ("FM", "FM")],
                        max_length=45,
                        null=True,
                        verbose_name="AFB technique?",
                    ),
                ),
                (
                    "afb_result_b",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no_AFB_seen", "no AFB seen"),
                            ("AFB_seen_scanty", "AFB seen, scanty"),
                            ("AFB_Seen_plus1", "AFB Seen , +1"),
                            ("AFB_Seen_plus2", "AFB Seen , +2"),
                            ("AFB_Seen_plus3", "AFB Seen , +3"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="Results B?",
                    ),
                ),
                (
                    "xpert_mtb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Xpert MTB (Ultra) test result Date?",
                    ),
                ),
                (
                    "xpert_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "mtb_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Is Sample Processing Control (SPC) Cycle threshold (Ct) value available",
                    ),
                ),
                (
                    "spc_ct_value",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        verbose_name="Sample Processing Control (SPC) Cycle threshold (Ct) value",
                    ),
                ),
                (
                    "test_repeated",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        null=True,
                        verbose_name="If no test result  was obtained, was the test repeated?",
                    ),
                ),
                (
                    "test_repeated_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Test repeated date?"
                    ),
                ),
                (
                    "test_not_repeated_reason",
                    models.CharField(
                        choices=[
                            ("sample_lost ", "sample lost "),
                            ("not_enough_sample", "not enough sample left"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="If No, specify reasons",
                    ),
                ),
                (
                    "test_not_repeated_reason_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "repeat_xpert_mtb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Xpert MTB (Ultra) test result Date?",
                    ),
                ),
                (
                    "repeat_xpert_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "repeat_mtb_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "repeat_rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "repeat_spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="SPC-Ct value available",
                    ),
                ),
                (
                    "repeat_spc_ct_value",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="SPC-Ct value"
                    ),
                ),
                (
                    "truenat_mtb_plus_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Truenat MTB Plus/ Truenat MTB-RIF Dx test Date?",
                    ),
                ),
                (
                    "truenat_plus_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_plus_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "truenat_spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Is Internal Positive Control (IPC) Cycle threshold (Ct) value available",
                    ),
                ),
                (
                    "truenat_spc_ct_value",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        verbose_name="Internal Positive Control (IPC) Cycle threshold (Ct) value",
                    ),
                ),
                (
                    "truenat_test_repeated",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        null=True,
                        verbose_name="If no test result  was obtained, was the test repeated?",
                    ),
                ),
                (
                    "truenat_test_repeated_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Test repeated date?"
                    ),
                ),
                (
                    "truenat_test_not_repeated_reason",
                    models.CharField(
                        choices=[
                            ("sample_lost ", "sample lost "),
                            ("not_enough_sample", "not enough sample left"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="If No, specify reasons",
                    ),
                ),
                (
                    "truenat_test_not_repeated_reason_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "truenat_repeat_xpert_mtb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Xpert MTB (Ultra) test result Date?",
                    ),
                ),
                (
                    "truenat_repeat_xpert_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_repeat_mtb_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_repeat_rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "truenat_repeat_spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Is IPC-Ct value available",
                    ),
                ),
                (
                    "truenat_repeat_spc_ct_value",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="IPC-Ct value"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Respiratory sample",
                "verbose_name_plural": "Respiratory sample",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
            },
            managers=[
                ("on_site", django.contrib.sites.managers.CurrentSiteManager()),
                ("objects", edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalSubjectVisit",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("subject_identifier", models.CharField(max_length=50)),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "visit_schedule_name",
                    models.CharField(
                        editable=False,
                        help_text='the name of the visit schedule used to find the "schedule"',
                        max_length=25,
                    ),
                ),
                ("schedule_name", models.CharField(editable=False, max_length=25)),
                ("visit_code", models.CharField(editable=False, max_length=25, null=True)),
                (
                    "visit_code_sequence",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)",
                        null=True,
                        verbose_name="Sequence",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of this report",
                        validators=[
                            edcs_protocol.validators.datetime_not_before_study_start,
                            edcs_model.models.validators.date.datetime_not_future,
                        ],
                        verbose_name="Report date and time",
                    ),
                ),
                (
                    "reason_unscheduled_other",
                    edcs_model.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If the reason for the unscheduled visit is "other", specify',
                    ),
                ),
                (
                    "reason_missed",
                    models.CharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If 'missed', provide the reason for the missed visit",
                    ),
                ),
                (
                    "reason_missed_other",
                    edcs_model.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=25,
                        null=True,
                        verbose_name='If the reason for the missed visit is "other", specify',
                    ),
                ),
                (
                    "study_status",
                    models.CharField(
                        max_length=50,
                        null=True,
                        verbose_name="What is the participant's current study status",
                    ),
                ),
                (
                    "require_crfs",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        max_length=10,
                        verbose_name="Are scheduled data being submitted with this visit?",
                    ),
                ),
                (
                    "info_source_other",
                    edcs_model.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name='If "Other" source of information, specify',
                    ),
                ),
                (
                    "survival_status",
                    models.CharField(
                        choices=[
                            ("alive", "Alive"),
                            ("dead", "Deceased"),
                            ("unknown", "Unknown"),
                        ],
                        default="alive",
                        max_length=10,
                        null=True,
                        verbose_name="Participant's survival status",
                    ),
                ),
                (
                    "last_alive_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            edcs_protocol.validators.date_not_before_study_start,
                            edcs_model.models.validators.date.date_not_future,
                        ],
                        verbose_name="Date participant last known alive",
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True,
                        max_length=250,
                        null=True,
                        verbose_name="Comment if any additional pertinent information about the participant",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled visit (study)"),
                            ("unscheduled", "Routine / Unscheduled visit (non-study)"),
                            ("missed", "Missed visit"),
                        ],
                        max_length=25,
                        verbose_name="What is the reason for this visit report?",
                    ),
                ),
                (
                    "reason_unscheduled",
                    models.CharField(
                        choices=[
                            ("routine_non_study", "Routine appointment (non-study)"),
                            ("patient_unwell_outpatient", "Patient unwell"),
                            ("drug_refill", "Drug refill only"),
                            ("OTHER", "Other"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=25,
                        verbose_name="If 'unscheduled', provide reason for the unscheduled visit",
                    ),
                ),
                (
                    "clinic_services_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "info_source",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            (
                                "patient_and_outpatient",
                                "Patient, hospital notes and/or outpatient card",
                            ),
                            (
                                "patient_representive",
                                "Patient Representative (e.family member, friend)",
                            ),
                            ("hospital_notes", "Hospital notes"),
                            ("outpatient_cards", "Outpatient cards"),
                            (
                                "collateral_history",
                                "Collateral History from relative/guardian",
                            ),
                            ("N/A", "Not applicable"),
                            ("OTHER", "Other"),
                        ],
                        max_length=25,
                        verbose_name="What is the main source of this information?",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "appointment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edcs_appointment.appointment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical subject visit",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRespiratorySample",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "respiratory_sample",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Is at least one respiratory sample available?",
                    ),
                ),
                (
                    "respiratory_sample_yes",
                    models.CharField(
                        choices=[("one", "One"), ("two", "Two"), ("three", "Three")],
                        max_length=45,
                        verbose_name="If yes, How many?",
                    ),
                ),
                (
                    "respiratory_sample_no",
                    models.CharField(
                        choices=[
                            ("sample_lost ", "sample lost "),
                            ("leaking_container", "Leaking container"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="If No, reason?",
                    ),
                ),
                (
                    "respiratory_sample_no_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "respiratory_sample1_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date sample(1) collected"
                    ),
                ),
                (
                    "respiratory_sample2_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date sample(2) collected"
                    ),
                ),
                (
                    "respiratory_sample3_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date sample(3) collected"
                    ),
                ),
                (
                    "sample_lab_receive_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date sample(s) received in the laboratory",
                    ),
                ),
                (
                    "sputum_respiratory_sample",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Sputum sample(s) received?"
                    ),
                ),
                (
                    "nga_respiratory_sample",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="NGA sample(s) received?"
                    ),
                ),
                (
                    "appearance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("watery_salivary", "Watery/salivary"),
                            ("mucoid", "Mucoid"),
                            ("purulent", "Purulent"),
                            ("bloody", "Bloody"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="Appearance",
                    ),
                ),
                (
                    "sample_volume",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="in mL",
                        max_digits=6,
                        null=True,
                        verbose_name="Approximate volume sample?",
                    ),
                ),
                (
                    "accession_status",
                    models.CharField(
                        choices=[("accepted", "Accepted"), ("rejected", "Rejected")],
                        max_length=45,
                        verbose_name="Sample accession status?",
                    ),
                ),
                (
                    "afb_microscopy_date_a",
                    models.DateField(
                        blank=True, null=True, verbose_name="AFB microscopy Date?"
                    ),
                ),
                (
                    "afb_technique_a",
                    models.CharField(
                        blank=True,
                        choices=[("ZN", "ZN"), ("FM", "FM")],
                        max_length=45,
                        null=True,
                        verbose_name="AFB technique?",
                    ),
                ),
                (
                    "afb_result_a",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no_AFB_seen", "no AFB seen"),
                            ("AFB_seen_scanty", "AFB seen, scanty"),
                            ("AFB_Seen_plus1", "AFB Seen , +1"),
                            ("AFB_Seen_plus2", "AFB Seen , +2"),
                            ("AFB_Seen_plus3", "AFB Seen , +3"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Results A?",
                    ),
                ),
                (
                    "afb_microscopy_date_b",
                    models.DateField(
                        blank=True, null=True, verbose_name="AFB microscopy Date?"
                    ),
                ),
                (
                    "afb_technique_b",
                    models.CharField(
                        blank=True,
                        choices=[("ZN", "ZN"), ("FM", "FM")],
                        max_length=45,
                        null=True,
                        verbose_name="AFB technique?",
                    ),
                ),
                (
                    "afb_result_b",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("no_AFB_seen", "no AFB seen"),
                            ("AFB_seen_scanty", "AFB seen, scanty"),
                            ("AFB_Seen_plus1", "AFB Seen , +1"),
                            ("AFB_Seen_plus2", "AFB Seen , +2"),
                            ("AFB_Seen_plus3", "AFB Seen , +3"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="Results B?",
                    ),
                ),
                (
                    "xpert_mtb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Xpert MTB (Ultra) test result Date?",
                    ),
                ),
                (
                    "xpert_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "mtb_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Is Sample Processing Control (SPC) Cycle threshold (Ct) value available",
                    ),
                ),
                (
                    "spc_ct_value",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        verbose_name="Sample Processing Control (SPC) Cycle threshold (Ct) value",
                    ),
                ),
                (
                    "test_repeated",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        null=True,
                        verbose_name="If no test result  was obtained, was the test repeated?",
                    ),
                ),
                (
                    "test_repeated_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Test repeated date?"
                    ),
                ),
                (
                    "test_not_repeated_reason",
                    models.CharField(
                        choices=[
                            ("sample_lost ", "sample lost "),
                            ("not_enough_sample", "not enough sample left"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="If No, specify reasons",
                    ),
                ),
                (
                    "test_not_repeated_reason_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "repeat_xpert_mtb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Xpert MTB (Ultra) test result Date?",
                    ),
                ),
                (
                    "repeat_xpert_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "repeat_mtb_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "repeat_rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "repeat_spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="SPC-Ct value available",
                    ),
                ),
                (
                    "repeat_spc_ct_value",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="SPC-Ct value"
                    ),
                ),
                (
                    "truenat_mtb_plus_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Truenat MTB Plus/ Truenat MTB-RIF Dx test Date?",
                    ),
                ),
                (
                    "truenat_plus_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_plus_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "truenat_spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Is Internal Positive Control (IPC) Cycle threshold (Ct) value available",
                    ),
                ),
                (
                    "truenat_spc_ct_value",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        verbose_name="Internal Positive Control (IPC) Cycle threshold (Ct) value",
                    ),
                ),
                (
                    "truenat_test_repeated",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        null=True,
                        verbose_name="If no test result  was obtained, was the test repeated?",
                    ),
                ),
                (
                    "truenat_test_repeated_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Test repeated date?"
                    ),
                ),
                (
                    "truenat_test_not_repeated_reason",
                    models.CharField(
                        choices=[
                            ("sample_lost ", "sample lost "),
                            ("not_enough_sample", "not enough sample left"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="If No, specify reasons",
                    ),
                ),
                (
                    "truenat_test_not_repeated_reason_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "truenat_repeat_xpert_mtb_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Xpert MTB (Ultra) test result Date?",
                    ),
                ),
                (
                    "truenat_repeat_xpert_mtb",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_repeat_mtb_error_code",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not_detected", "Not detected"),
                            ("detected_trace", "Detected, trace"),
                            ("detected_very_low", "Detected, very low"),
                            ("detected_low", "Detected, low"),
                            ("detected_medium", "Detected, medium"),
                            ("detected_high", "Detected, high"),
                            ("invalid", "Invalid"),
                            ("error", "Error"),
                            ("no_result", "No result"),
                        ],
                        max_length=125,
                        null=True,
                        verbose_name="MTB",
                    ),
                ),
                (
                    "truenat_repeat_rif_resistance",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("not detected", "Not detected"),
                            ("detected", "Detected"),
                            ("indeterminate", "Indeterminate"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="RIF resistance",
                    ),
                ),
                (
                    "truenat_repeat_spc_ct_available",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "YES"),
                            ("no_spc_ct_value", "no SPC-Ct value (no test result)"),
                        ],
                        max_length=80,
                        null=True,
                        verbose_name="Is IPC-Ct value available",
                    ),
                ),
                (
                    "truenat_repeat_spc_ct_value",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="IPC-Ct value"
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Respiratory sample",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEnrollmentCRF",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "cough",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Cough of >2 weeks?",
                    ),
                ),
                (
                    "weight_gain_loss",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Poor weight gain or loss of weight?",
                    ),
                ),
                (
                    "cough_blood",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Coughing up blood?",
                    ),
                ),
                (
                    "fever",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Unexplained fever?",
                    ),
                ),
                (
                    "night_sweat",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Drenching night sweats?",
                    ),
                ),
                (
                    "neck_enlarged",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Lymph nodes in neck enlarged?",
                    ),
                ),
                (
                    "contact_TB_patient",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Contact history with infectious TB patient",
                    ),
                ),
                (
                    "TB_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was the participant treated for TB before?",
                    ),
                ),
                (
                    "TB_treatment_duration",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="How long ago was the participant treated for TB?",
                    ),
                ),
                (
                    "TB_treatment_regimen",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Which treatment regimen and duration was used?",
                    ),
                ),
                (
                    "TB_treatment_outcome",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="What was the treatment outcome?",
                    ),
                ),
                (
                    "hiv_status",
                    models.CharField(
                        choices=[("POS", "Positive"), ("NEG", "Negative")],
                        max_length=15,
                        verbose_name="HIV status?",
                    ),
                ),
                (
                    "immuno_diseases",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=45,
                        verbose_name="Other immunosuppressing diseases?",
                    ),
                ),
                (
                    "immuno_diseases_specify",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="If yes, to immunosuppressing diseases, please specify?",
                    ),
                ),
                (
                    "other_disease",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=45,
                        verbose_name="Other relevant disease/medical condition?",
                    ),
                ),
                (
                    "other_disease_specify",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("diabetes_mellitus", "Diabetes Mellitus"),
                            ("hypertension", "Hypertension"),
                            ("COPD", "Chronic obstructive pulmonary disease (COPD)"),
                            ("malignancy", "Malignancy"),
                            ("heart_disease", "Heart disease"),
                            ("CKD", "Chronic kidney disease (CKD)"),
                            ("organ_transplant", "Organ transplant"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="If yes, to other relevant disease/medical condition?",
                    ),
                ),
                (
                    "other_disease_specify_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "resp_sample",
                    models.CharField(
                        choices=[
                            ("yes_two", "Yes, two samples were collected"),
                            ("no_one", "No, one sample was collected"),
                            ("no", "No, no such samples were collected "),
                        ],
                        max_length=45,
                        verbose_name="After TB was confirmed by a rapid molecular test, were two additional respiratory samples collected?",
                    ),
                ),
                (
                    "resp_sample_DST_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date of Sample for standard DST sample collection",
                    ),
                ),
                (
                    "resp_sample_type_DST",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Sample type"
                    ),
                ),
                (
                    "resp_sample_seq_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date of Sample for sequencing collection",
                    ),
                ),
                (
                    "resp_sample_type_seq",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Sample type"
                    ),
                ),
                (
                    "pleural_fluid",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was pleural fluid sample requested?",
                    ),
                ),
                (
                    "pleural_fluid_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were pleural fluid sample requested",
                    ),
                ),
                (
                    "csf",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Cerebral spinal fluid (CSF) sample requested?",
                    ),
                ),
                (
                    "csf_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Cerebral spinal fluid (CSF) sample requested",
                    ),
                ),
                (
                    "peritoneal_fluid",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Cerebral Peritoneal fluid sample requested?",
                    ),
                ),
                (
                    "peritoneal_fluid_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Peritoneal fluid sample requested",
                    ),
                ),
                (
                    "pericardial_fluid",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Pericardial fluid sample requested?",
                    ),
                ),
                (
                    "pericardial_fluid_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Pericardial fluid sample requested",
                    ),
                ),
                (
                    "lymph_node_aspirate",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Lymph node aspirate sample requested?",
                    ),
                ),
                (
                    "lymph_node_aspirate_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Lymph node aspirate sample requested",
                    ),
                ),
                (
                    "stool",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Stool sample requested?",
                    ),
                ),
                (
                    "stool_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date were Stool sample requested"
                    ),
                ),
                (
                    "other_requested_sample",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Any other diagnostic samples requested?",
                    ),
                ),
                (
                    "chest_xray",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was chest X-ray requested?",
                    ),
                ),
                (
                    "chest_xray_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="If yes to chest x-ray, please specify date",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Enrollment CRF",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDrugSusceptibilityTests",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "phenotypic_rifampicin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Rifampicin",
                    ),
                ),
                (
                    "phenotypic_rifampicin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_isoniazid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Isoniazid",
                    ),
                ),
                (
                    "phenotypic_isoniazid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_levofloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Levofloxacin",
                    ),
                ),
                (
                    "phenotypic_levofloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_moxifloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Moxifloxacin",
                    ),
                ),
                (
                    "phenotypic_moxifloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_bedaquiline",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Bedaquiline",
                    ),
                ),
                (
                    "phenotypic_bedaquiline_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_linezolid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Linezolid",
                    ),
                ),
                (
                    "phenotypic_linezolid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_clofazimine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Clofazimine",
                    ),
                ),
                (
                    "phenotypic_clofazimine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_cycloserine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Cycloserine",
                    ),
                ),
                (
                    "phenotypic_cycloserine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_terizidone",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Terizidone",
                    ),
                ),
                (
                    "phenotypic_terizidone_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_ethambutol",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethambutol",
                    ),
                ),
                (
                    "phenotypic_ethambutol_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_delamanid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Delamanid",
                    ),
                ),
                (
                    "phenotypic_delamanid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_pyrazinamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Pyrazinamide",
                    ),
                ),
                (
                    "phenotypic_pyrazinamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_imipenem_cilastatin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Imipenem-cilastatin",
                    ),
                ),
                (
                    "phenotypic_imipenem_cilastatin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_meropenem",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Meropenem",
                    ),
                ),
                (
                    "phenotypic_meropenem_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_amikacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Amikacin",
                    ),
                ),
                (
                    "phenotypic_amikacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_streptomycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Streptomycin",
                    ),
                ),
                (
                    "phenotypic_streptomycin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_ethionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethionamide",
                    ),
                ),
                (
                    "phenotypic_ethionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_prothionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Prothionamide",
                    ),
                ),
                (
                    "phenotypic_prothionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_para_aminosalicylic",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Para-aminosalicylic acid",
                    ),
                ),
                (
                    "phenotypic_para_aminosalicylic_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "xpert_mtb_refampicin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("rif_resistance_detected", "Rif resistance DETECTED"),
                            ("rif_resistance_not_detected", "Rif Resistance NOT DETECTED"),
                            ("rif_resistance_indeterminate", "Rif Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Refampicin",
                    ),
                ),
                (
                    "xpert_xdr_isoniazid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("low_inh_resistance_detected", "Low INH Resistance DETECTED"),
                            ("inh_resistance_detected", "INH Resistance DETECTED"),
                            ("inh_resistance_not_detected", "INH Resistance NOT DETECTED"),
                            ("inh_resistance_indeterminate", "INH Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Isoniazid",
                    ),
                ),
                (
                    "xpert_xdr_fluoroquinolones",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("low_flq_resistance_detected", "Low FLQ Resistance DETECTED"),
                            ("flq_resistance_detected", "FLQ Resistance DETECTED"),
                            ("flq_resistance_not_detected", "FLQ Resistance NOT DETECTED"),
                            ("flq_resistance_indeterminate", "FLQ Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Fluoroquinolones",
                    ),
                ),
                (
                    "xpert_xdr_amikacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("amk_resistance_detected", "AMK Resistance DETECTED"),
                            ("amk_resistance_not_detected", "AMK Resistance NOT DETECTED"),
                            ("amk_resistance_indeterminate", "AMK Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Amikacin",
                    ),
                ),
                (
                    "xpert_xdr_kanamycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("kan_resistance_detected", "KAN Resistance DETECTED"),
                            ("kan_resistance_not_detected", "KAN Resistance NOT DETECTED"),
                            ("kan_resistance_indeterminate", "KAN Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Kanamycin",
                    ),
                ),
                (
                    "xpert_xdr_capreomycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("cap_resistance_detected", "CAP Resistance DETECTED"),
                            ("cap_resistance_not_detected", "CAP Resistance NOT DETECTED"),
                            ("cap_resistance_indeterminate", "CAP Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Capreomycin",
                    ),
                ),
                (
                    "xpert_xdr_ethionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("eth_resistance_detected", "ETH Resistance DETECTED"),
                            ("eth_resistance_not_detected", "ETH Resistance NOT DETECTED"),
                        ],
                        max_length=45,
                        verbose_name="Ethionamide",
                    ),
                ),
                (
                    "nanopore_rifampicin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Rifampicin",
                    ),
                ),
                (
                    "nanopore_rifampicin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_isoniazid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Isoniazid",
                    ),
                ),
                (
                    "nanopore_isoniazid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_levofloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Levofloxacin",
                    ),
                ),
                (
                    "nanopore_levofloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_moxifloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Moxifloxacin",
                    ),
                ),
                (
                    "nanopore_moxifloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_bedaquiline",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Bedaquiline",
                    ),
                ),
                (
                    "nanopore_bedaquiline_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_linezolid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Linezolid",
                    ),
                ),
                (
                    "nanopore_linezolid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_clofazimine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Clofazimine",
                    ),
                ),
                (
                    "nanopore_clofazimine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_cycloserine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Cycloserine",
                    ),
                ),
                (
                    "nanopore_cycloserine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_terizidone",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Terizidone",
                    ),
                ),
                (
                    "nanopore_terizidone_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_ethambutol",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethambutol",
                    ),
                ),
                (
                    "nanopore_ethambutol_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_delamanid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Delamanid",
                    ),
                ),
                (
                    "nanopore_delamanid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_pyrazinamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Pyrazinamide",
                    ),
                ),
                (
                    "nanopore_pyrazinamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_imipenem_cilastatin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Imipenem-cilastatin",
                    ),
                ),
                (
                    "nanopore_imipenem_cilastatin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_meropenem",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Meropenem",
                    ),
                ),
                (
                    "nanopore_meropenem_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_amikacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Amikacin",
                    ),
                ),
                (
                    "nanopore_amikacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_streptomycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Streptomycin",
                    ),
                ),
                (
                    "nanopore_streptomycin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_ethionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethionamide",
                    ),
                ),
                (
                    "nanopore_ethionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_prothionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Prothionamide",
                    ),
                ),
                (
                    "nanopore_prothionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_para_aminosalicylic",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Para-aminosalicylic acid",
                    ),
                ),
                (
                    "nanopore_para_aminosalicylic_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "genotype_mtbdrplus",
                    models.CharField(
                        choices=[
                            ("conjugate_control", "Conjugate Control"),
                            ("amplification_control ", "Amplification Control "),
                            ("m_tuberculosis_complex_tub", "M. tuberculosis complex TUB"),
                            ("rpoB_locus_control_rpoB ", "rpoB Locus Control rpoB "),
                            (
                                "rpoB_wild_type_probe_1_rpoB_WT1",
                                "rpoB wild type probe 1 rpoB WT1",
                            ),
                            ("wild_type_probe_2_rpoB_WT2", "wild type probe 2 rpoB WT2"),
                            (
                                "rpoB_wild_type_probe_3_rpoB_WT3",
                                "rpoB wild type probe 3 rpoB WT3",
                            ),
                            (
                                "rpoB_wild_type_probe_4_rpoB_WT4",
                                "rpoB wild type probe 4 rpoB WT4",
                            ),
                            (
                                "rpoB_wild_type_probe_5_rpoB_WT5",
                                "rpoB wild type probe 5 rpoB WT5",
                            ),
                            (
                                "rpoB_wild_type_probe_6_rpoB_WT6",
                                "rpoB wild type probe 6 rpoB WT6",
                            ),
                            (
                                "rpoB_wild_type_probe_7_rpoB_WT7",
                                "rpoB wild type probe 7 rpoB WT7",
                            ),
                            (
                                "rpoB_wild_type_probe_8_rpoB_WT8",
                                "rpoB wild type probe 8 rpoB WT8",
                            ),
                            (
                                "rpoB_mutation_probe_1_rpoB_MUT1",
                                "rpoB mutation probe 1 rpoB MUT1",
                            ),
                            (
                                "rpoB_mutation_probe_2A_rpoB_MUT2A",
                                "rpoB mutation probe 2A rpoB MUT2A",
                            ),
                            (
                                "rpoB_mutation_probe_2B_rpoB_MUT2B",
                                "rpoB mutation probe 2B rpoB MUT2B",
                            ),
                            ("mutation_probe_3_rpoB_MUT3", "mutation probe 3 rpoB MUT3"),
                            ("katG_locus_control_katG", "katG Locus Control katG"),
                            ("katG_wild_type_probe_katG_WT", "katG wild type probe katG WT"),
                            ("mutation_probe_1_katG_MUT1", "mutation probe 1 katG MUT1"),
                            (
                                "katG_mutation_probe_2_katG_MUT2",
                                "katG mutation probe 2 katG MUT2",
                            ),
                            ("inhA_locus_control_inhA", "inhA Locus Control inhA"),
                            (
                                "inhA_wild_type_probe_1_inhA_WT1",
                                "inhA wild type probe 1 inhA WT1",
                            ),
                            (
                                "inhA_wild_type_probe_2_inhA_WT2",
                                "inhA wild type probe 2 inhA WT2",
                            ),
                            (
                                "inhA_mutation_probe_1_inhA_MUT1",
                                "inhA mutation probe 1 inhA MUT1",
                            ),
                            (
                                "inhA_mutation_probe_2_inhA_MUT2",
                                "inhA mutation probe 2 inhA MUT2",
                            ),
                            (
                                "inhA_mutation_probe_3A_inhA_MUT3A",
                                "inhA mutation probe 3A inhA MUT3A",
                            ),
                            (
                                "inhA_mutation_probe_3B_inhA_MUT3B",
                                "inhA mutation probe 3B inhA MUT3B",
                            ),
                        ],
                        max_length=125,
                        verbose_name="Line probe assay (1st line drugs). (GenoType MTBDRplus V2). Indicate bands visible on the strip",
                    ),
                ),
                (
                    "genotype_mtbdrsi",
                    models.CharField(
                        choices=[
                            ("Conjugate_Control", "Conjugate Control"),
                            ("amplification_control", "Amplification Control"),
                            ("m_tuberculosis_complex_TUB", "M. tuberculosis complex TUB"),
                            ("gyrA_locus_control_gyrA", "gyrA Locus Control gyrA"),
                            (
                                "gyrA_wild_type_probe_1_gyrA_WT1",
                                "gyrA wild type probe 1 gyrA WT1",
                            ),
                            (
                                "gyrA_wild_type_probe_2_gyrA_WT2",
                                "gyrA wild type probe 2 gyrA WT2",
                            ),
                            (
                                "gyrA_wild_type_probe_3 gyrA_WT3",
                                "gyrA wild type probe 3 gyrA WT3",
                            ),
                            (
                                "gyrA_mutation_probe_1_gyrA_MUT1",
                                "gyrA mutation probe 1 gyrA MUT1",
                            ),
                            (
                                "gyrA_mutation_probe_2_gyrA_MUT2",
                                "gyrA mutation probe 2 gyrA MUT2",
                            ),
                            (
                                "gyrA_mutation_probe_3A_gyrA MUT3A",
                                "gyrA mutation probe 3A gyrA MUT3A",
                            ),
                            (
                                "gyrA_mutation_probe_3B_gyrA MUT3B",
                                "gyrA mutation probe 3B gyrA MUT3B",
                            ),
                            (
                                "gyrA_mutation_probe_3C_gyrA MUT3C",
                                "gyrA mutation probe 3C gyrA MUT3C",
                            ),
                            (
                                "gyrA_mutation_probe_3D_gyrA MUT3D",
                                "gyrA mutation probe 3D gyrA MUT3D",
                            ),
                            ("gyrB_Locus_Control_gyrB", "gyrB Locus Control gyrB"),
                            ("gyrB_wild_type_probe_gyrB_WT", "gyrB wild type probe gyrB WT"),
                            (
                                "gyrB_mutation_probe_1_gyrB_MUT1",
                                "gyrB mutation probe 1 gyrB MUT1",
                            ),
                            (
                                "gyrB_mutation_probe_2_gyrB_MUT2",
                                "gyrB mutation probe 2 gyrB MUT2",
                            ),
                            ("rrs_Locus_Control_rrs", "rrs Locus Control rrs"),
                            ("rrs_wild_type_probe_1_rrs_WT1", "rrs wild type probe 1 rrs WT1"),
                            ("rrs_wild_type_probe_2_rrs_WT2", "rrs wild type probe 2 rrs WT2"),
                            ("rrs_mutation_probe_1_rrs_MUT1", "rrs mutation probe 1 rrs MUT1"),
                            ("rrs_mutation_probe_2_rrs_MUT2", "rrs mutation probe 2 rrs MUT2"),
                            ("eis_locus_control_eis", "eis Locus Control eis"),
                            ("eis_wild_type_probe_1_eis_WT1", "eis wild type probe 1 eis WT1"),
                            ("eis_wild_type_probe_2_eis_WT2", "eis wild type probe 2 eis WT2"),
                            ("eis_wild_type_probe_3_eis_WT3", "eis wild type probe 3 eis WT3"),
                            ("eis_mutation_probe_1_eis_MUT", "eis mutation probe 1 eis MUT"),
                        ],
                        max_length=125,
                        verbose_name="Line probe assay (2nd line drugs).(GenoType MTBDRsl V2). Indicate bands visible on the strip",
                    ),
                ),
                (
                    "nanopore_version_number",
                    models.CharField(max_length=45, verbose_name="Version number"),
                ),
                (
                    "nanopore_lot_number",
                    models.CharField(max_length=45, verbose_name="Lot number"),
                ),
                (
                    "nanopore_resistance_detected",
                    models.TextField(
                        verbose_name="Specify drug resistance mutations detected"
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Drug susceptibility Test",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDiagnosticTests",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                ("sample_type_a", models.CharField(max_length=85, verbose_name="Sample type")),
                (
                    "xpert_mtb_rif_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Xpert MTB/RIF (Ultra)",
                    ),
                ),
                (
                    "truenat_mtb_plus_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Truenat MTB Plus",
                    ),
                ),
                (
                    "culture_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Culture MGIT/LJ",
                    ),
                ),
                (
                    "smear_microscopy_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Smear microscopy\tdirect ZN/FM",
                    ),
                ),
                (
                    "mods_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="MODS",
                    ),
                ),
                (
                    "other_test_a",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "other_test_result_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Test result",
                    ),
                ),
                ("sample_type_b", models.CharField(max_length=85, verbose_name="Sample type")),
                (
                    "xpert_mtb_rif_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Xpert MTB/RIF (Ultra)",
                    ),
                ),
                (
                    "truenat_mtb_plus_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Truenat MTB Plus",
                    ),
                ),
                (
                    "culture_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Culture MGIT/LJ",
                    ),
                ),
                (
                    "smear_microscopy_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Smear microscopy\tdirect ZN/FM",
                    ),
                ),
                (
                    "mods_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="MODS",
                    ),
                ),
                (
                    "other_test_b",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "other_test_result_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Test result",
                    ),
                ),
                (
                    "remarks",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Any remarks on any of the laboratory procedures above",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Diagnostic Tests",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDiagnosisCrf",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "TB_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was a TB diagnosis made?",
                    ),
                ),
                (
                    "TB_dx_made",
                    models.CharField(
                        choices=[
                            (
                                "signs_symptoms_only",
                                "Based on clinical signs and symptoms only ",
                            ),
                            (
                                "signs_symptoms_bacteriology",
                                "Based a combination of signs, symptoms and bacteriology",
                            ),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="How was the TB diagnosis made?",
                    ),
                ),
                (
                    "TB_dx_made_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "TB_dx_xpert_truenat_nga",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="On what test result(s) was the bacteriological diagnosis based on Xpert/Truenat on sputum/NGA?",
                    ),
                ),
                (
                    "TB_dx_xpert_truenat_nga_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date (Xpert/Truenat on sputum/NGA) result received by clinician",
                    ),
                ),
                (
                    "TB_dx_other_tests",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Other test(s) with respective dates?",
                    ),
                ),
                (
                    "info_TB_dx_made_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "TB_treatment_start",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("referred_treatment", "Patient referred for treatment"),
                            ("not_started", "Not started"),
                        ],
                        max_length=45,
                        verbose_name="Was TB treatment started?",
                    ),
                ),
                (
                    "TB_treatment_start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="If yes, treatment start date?"
                    ),
                ),
                (
                    "health_facility",
                    models.CharField(
                        blank=True,
                        max_length=45,
                        null=True,
                        verbose_name="If referred  for treatment, name of the health facility?",
                    ),
                ),
                (
                    "reason_not_started",
                    models.TextField(
                        blank=True, null=True, verbose_name="If Not started, specify reasons?"
                    ),
                ),
                (
                    "treatment_regimen",
                    models.CharField(
                        choices=[
                            ("ds_tb", "DS TB regimen (2RHZE and 4RH)"),
                            ("dr_tb", "DR TB long regimen"),
                            ("dr_short", "DR Short regimen"),
                            ("individual_regimen", "Individualized regimen"),
                        ],
                        max_length=45,
                        verbose_name="What treatment regimen was prescribed?",
                    ),
                ),
                (
                    "treatment_regimen_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "treatment_based_result",
                    models.CharField(
                        choices=[
                            (
                                "not_based_result",
                                "Treatment regimen was not based on a test result",
                            ),
                            ("phenotypic_dst", "Phenotypic DST"),
                            ("smear_afb", "Smear AFB microscopy"),
                            ("xpert_ultra", "Xpert Ultra"),
                            ("culture", "Culture"),
                            ("xpert_xdr", "Xpert XDR"),
                            ("1nd_line_drugs", "Line probe assay (1st line drugs)"),
                            ("2nd_line_drugs", "Line probe assay (2nd line drugs)"),
                            ("sequencing", "Sequencing"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="On what test result was the treatment regimen based and when did this test result become available to you? ",
                    ),
                ),
                (
                    "treatment_based_result_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "regimen_changed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was the regimen changed during the treatment?",
                    ),
                ),
                (
                    "regimen_changed_no",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="If yes, How many times regimen changed during the treatment?",
                    ),
                ),
                (
                    "regimen_change1_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                (
                    "regimen_change1",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Change introduced to the regimen",
                    ),
                ),
                (
                    "regimen_change1_reasons",
                    models.TextField(blank=True, null=True, verbose_name="Reason for change?"),
                ),
                (
                    "regimen_change2_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                (
                    "regimen_change2",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Change introduced to the regimen",
                    ),
                ),
                (
                    "regimen_change2_reasons",
                    models.TextField(blank=True, null=True, verbose_name="Reason for change?"),
                ),
                (
                    "regimen_change3_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                (
                    "regimen_change3",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Change introduced to the regimen",
                    ),
                ),
                (
                    "regimen_change3_reasons",
                    models.TextField(blank=True, null=True, verbose_name="Reason for change?"),
                ),
                (
                    "treatment_outcome",
                    models.CharField(
                        choices=[
                            ("cured", "Cured"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("lost_followup", "Lost-to-follow-up"),
                            ("died", "Died"),
                        ],
                        max_length=15,
                        verbose_name="Treatment outcome at the end of treatment?",
                    ),
                ),
                (
                    "other_dx_pneumonia",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="If Bacterial pneumonia, please specify causative species if known?",
                    ),
                ),
                (
                    "other_dx_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "other_disease",
                    models.CharField(
                        max_length=115, verbose_name="How was this diagnosis made?"
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Diagnosis CRF",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="EnrollmentCRF",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "cough",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Cough of >2 weeks?",
                    ),
                ),
                (
                    "weight_gain_loss",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Poor weight gain or loss of weight?",
                    ),
                ),
                (
                    "cough_blood",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Coughing up blood?",
                    ),
                ),
                (
                    "fever",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Unexplained fever?",
                    ),
                ),
                (
                    "night_sweat",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Drenching night sweats?",
                    ),
                ),
                (
                    "neck_enlarged",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Lymph nodes in neck enlarged?",
                    ),
                ),
                (
                    "contact_TB_patient",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Contact history with infectious TB patient",
                    ),
                ),
                (
                    "TB_treatment",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was the participant treated for TB before?",
                    ),
                ),
                (
                    "TB_treatment_duration",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="How long ago was the participant treated for TB?",
                    ),
                ),
                (
                    "TB_treatment_regimen",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Which treatment regimen and duration was used?",
                    ),
                ),
                (
                    "TB_treatment_outcome",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="What was the treatment outcome?",
                    ),
                ),
                (
                    "hiv_status",
                    models.CharField(
                        choices=[("POS", "Positive"), ("NEG", "Negative")],
                        max_length=15,
                        verbose_name="HIV status?",
                    ),
                ),
                (
                    "immuno_diseases",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=45,
                        verbose_name="Other immunosuppressing diseases?",
                    ),
                ),
                (
                    "immuno_diseases_specify",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="If yes, to immunosuppressing diseases, please specify?",
                    ),
                ),
                (
                    "other_disease",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("unknown", "Unknown")],
                        max_length=45,
                        verbose_name="Other relevant disease/medical condition?",
                    ),
                ),
                (
                    "other_disease_specify",
                    models.TextField(
                        blank=True,
                        choices=[
                            ("diabetes_mellitus", "Diabetes Mellitus"),
                            ("hypertension", "Hypertension"),
                            ("COPD", "Chronic obstructive pulmonary disease (COPD)"),
                            ("malignancy", "Malignancy"),
                            ("heart_disease", "Heart disease"),
                            ("CKD", "Chronic kidney disease (CKD)"),
                            ("organ_transplant", "Organ transplant"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        null=True,
                        verbose_name="If yes, to other relevant disease/medical condition?",
                    ),
                ),
                (
                    "other_disease_specify_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "resp_sample",
                    models.CharField(
                        choices=[
                            ("yes_two", "Yes, two samples were collected"),
                            ("no_one", "No, one sample was collected"),
                            ("no", "No, no such samples were collected "),
                        ],
                        max_length=45,
                        verbose_name="After TB was confirmed by a rapid molecular test, were two additional respiratory samples collected?",
                    ),
                ),
                (
                    "resp_sample_DST_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date of Sample for standard DST sample collection",
                    ),
                ),
                (
                    "resp_sample_type_DST",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Sample type"
                    ),
                ),
                (
                    "resp_sample_seq_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date of Sample for sequencing collection",
                    ),
                ),
                (
                    "resp_sample_type_seq",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Sample type"
                    ),
                ),
                (
                    "pleural_fluid",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was pleural fluid sample requested?",
                    ),
                ),
                (
                    "pleural_fluid_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were pleural fluid sample requested",
                    ),
                ),
                (
                    "csf",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Cerebral spinal fluid (CSF) sample requested?",
                    ),
                ),
                (
                    "csf_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Cerebral spinal fluid (CSF) sample requested",
                    ),
                ),
                (
                    "peritoneal_fluid",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Cerebral Peritoneal fluid sample requested?",
                    ),
                ),
                (
                    "peritoneal_fluid_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Peritoneal fluid sample requested",
                    ),
                ),
                (
                    "pericardial_fluid",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Pericardial fluid sample requested?",
                    ),
                ),
                (
                    "pericardial_fluid_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Pericardial fluid sample requested",
                    ),
                ),
                (
                    "lymph_node_aspirate",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Lymph node aspirate sample requested?",
                    ),
                ),
                (
                    "lymph_node_aspirate_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date were Lymph node aspirate sample requested",
                    ),
                ),
                (
                    "stool",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was Stool sample requested?",
                    ),
                ),
                (
                    "stool_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date were Stool sample requested"
                    ),
                ),
                (
                    "other_requested_sample",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Any other diagnostic samples requested?",
                    ),
                ),
                (
                    "chest_xray",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was chest X-ray requested?",
                    ),
                ),
                (
                    "chest_xray_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="If yes to chest x-ray, please specify date",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Enrollment CRF",
                "verbose_name_plural": "Enrollment CRF",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
            },
            managers=[
                ("on_site", django.contrib.sites.managers.CurrentSiteManager()),
                ("objects", edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name="DrugSusceptibilityTests",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "phenotypic_rifampicin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Rifampicin",
                    ),
                ),
                (
                    "phenotypic_rifampicin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_isoniazid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Isoniazid",
                    ),
                ),
                (
                    "phenotypic_isoniazid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_levofloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Levofloxacin",
                    ),
                ),
                (
                    "phenotypic_levofloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_moxifloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Moxifloxacin",
                    ),
                ),
                (
                    "phenotypic_moxifloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_bedaquiline",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Bedaquiline",
                    ),
                ),
                (
                    "phenotypic_bedaquiline_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_linezolid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Linezolid",
                    ),
                ),
                (
                    "phenotypic_linezolid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_clofazimine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Clofazimine",
                    ),
                ),
                (
                    "phenotypic_clofazimine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_cycloserine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Cycloserine",
                    ),
                ),
                (
                    "phenotypic_cycloserine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_terizidone",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Terizidone",
                    ),
                ),
                (
                    "phenotypic_terizidone_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_ethambutol",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethambutol",
                    ),
                ),
                (
                    "phenotypic_ethambutol_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_delamanid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Delamanid",
                    ),
                ),
                (
                    "phenotypic_delamanid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_pyrazinamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Pyrazinamide",
                    ),
                ),
                (
                    "phenotypic_pyrazinamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_imipenem_cilastatin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Imipenem-cilastatin",
                    ),
                ),
                (
                    "phenotypic_imipenem_cilastatin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_meropenem",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Meropenem",
                    ),
                ),
                (
                    "phenotypic_meropenem_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_amikacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Amikacin",
                    ),
                ),
                (
                    "phenotypic_amikacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_streptomycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Streptomycin",
                    ),
                ),
                (
                    "phenotypic_streptomycin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_ethionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethionamide",
                    ),
                ),
                (
                    "phenotypic_ethionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_prothionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Prothionamide",
                    ),
                ),
                (
                    "phenotypic_prothionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "phenotypic_para_aminosalicylic",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Para-aminosalicylic acid",
                    ),
                ),
                (
                    "phenotypic_para_aminosalicylic_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "xpert_mtb_refampicin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("rif_resistance_detected", "Rif resistance DETECTED"),
                            ("rif_resistance_not_detected", "Rif Resistance NOT DETECTED"),
                            ("rif_resistance_indeterminate", "Rif Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Refampicin",
                    ),
                ),
                (
                    "xpert_xdr_isoniazid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("low_inh_resistance_detected", "Low INH Resistance DETECTED"),
                            ("inh_resistance_detected", "INH Resistance DETECTED"),
                            ("inh_resistance_not_detected", "INH Resistance NOT DETECTED"),
                            ("inh_resistance_indeterminate", "INH Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Isoniazid",
                    ),
                ),
                (
                    "xpert_xdr_fluoroquinolones",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("low_flq_resistance_detected", "Low FLQ Resistance DETECTED"),
                            ("flq_resistance_detected", "FLQ Resistance DETECTED"),
                            ("flq_resistance_not_detected", "FLQ Resistance NOT DETECTED"),
                            ("flq_resistance_indeterminate", "FLQ Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Fluoroquinolones",
                    ),
                ),
                (
                    "xpert_xdr_amikacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("amk_resistance_detected", "AMK Resistance DETECTED"),
                            ("amk_resistance_not_detected", "AMK Resistance NOT DETECTED"),
                            ("amk_resistance_indeterminate", "AMK Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Amikacin",
                    ),
                ),
                (
                    "xpert_xdr_kanamycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("kan_resistance_detected", "KAN Resistance DETECTED"),
                            ("kan_resistance_not_detected", "KAN Resistance NOT DETECTED"),
                            ("kan_resistance_indeterminate", "KAN Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Kanamycin",
                    ),
                ),
                (
                    "xpert_xdr_capreomycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("cap_resistance_detected", "CAP Resistance DETECTED"),
                            ("cap_resistance_not_detected", "CAP Resistance NOT DETECTED"),
                            ("cap_resistance_indeterminate", "CAP Resistance INDETERMINATE"),
                        ],
                        max_length=45,
                        verbose_name="Capreomycin",
                    ),
                ),
                (
                    "xpert_xdr_ethionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("eth_resistance_detected", "ETH Resistance DETECTED"),
                            ("eth_resistance_not_detected", "ETH Resistance NOT DETECTED"),
                        ],
                        max_length=45,
                        verbose_name="Ethionamide",
                    ),
                ),
                (
                    "nanopore_rifampicin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Rifampicin",
                    ),
                ),
                (
                    "nanopore_rifampicin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_isoniazid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Isoniazid",
                    ),
                ),
                (
                    "nanopore_isoniazid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_levofloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Levofloxacin",
                    ),
                ),
                (
                    "nanopore_levofloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_moxifloxacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Moxifloxacin",
                    ),
                ),
                (
                    "nanopore_moxifloxacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_bedaquiline",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Bedaquiline",
                    ),
                ),
                (
                    "nanopore_bedaquiline_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_linezolid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Linezolid",
                    ),
                ),
                (
                    "nanopore_linezolid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_clofazimine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Clofazimine",
                    ),
                ),
                (
                    "nanopore_clofazimine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_cycloserine",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Cycloserine",
                    ),
                ),
                (
                    "nanopore_cycloserine_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_terizidone",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Terizidone",
                    ),
                ),
                (
                    "nanopore_terizidone_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_ethambutol",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethambutol",
                    ),
                ),
                (
                    "nanopore_ethambutol_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_delamanid",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Delamanid",
                    ),
                ),
                (
                    "nanopore_delamanid_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_pyrazinamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Pyrazinamide",
                    ),
                ),
                (
                    "nanopore_pyrazinamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_imipenem_cilastatin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Imipenem-cilastatin",
                    ),
                ),
                (
                    "nanopore_imipenem_cilastatin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_meropenem",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Meropenem",
                    ),
                ),
                (
                    "nanopore_meropenem_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_amikacin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Amikacin",
                    ),
                ),
                (
                    "nanopore_amikacin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_streptomycin",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Streptomycin",
                    ),
                ),
                (
                    "nanopore_streptomycin_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_ethionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Ethionamide",
                    ),
                ),
                (
                    "nanopore_ethionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_prothionamide",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Prothionamide",
                    ),
                ),
                (
                    "nanopore_prothionamide_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "nanopore_para_aminosalicylic",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("resistant", "Resistant"),
                            ("susceptible", "Susceptible"),
                            ("no_result", "No result"),
                        ],
                        max_length=45,
                        verbose_name="Para-aminosalicylic acid",
                    ),
                ),
                (
                    "nanopore_para_aminosalicylic_mic",
                    models.CharField(max_length=125, verbose_name="MIC"),
                ),
                (
                    "genotype_mtbdrplus",
                    models.CharField(
                        choices=[
                            ("conjugate_control", "Conjugate Control"),
                            ("amplification_control ", "Amplification Control "),
                            ("m_tuberculosis_complex_tub", "M. tuberculosis complex TUB"),
                            ("rpoB_locus_control_rpoB ", "rpoB Locus Control rpoB "),
                            (
                                "rpoB_wild_type_probe_1_rpoB_WT1",
                                "rpoB wild type probe 1 rpoB WT1",
                            ),
                            ("wild_type_probe_2_rpoB_WT2", "wild type probe 2 rpoB WT2"),
                            (
                                "rpoB_wild_type_probe_3_rpoB_WT3",
                                "rpoB wild type probe 3 rpoB WT3",
                            ),
                            (
                                "rpoB_wild_type_probe_4_rpoB_WT4",
                                "rpoB wild type probe 4 rpoB WT4",
                            ),
                            (
                                "rpoB_wild_type_probe_5_rpoB_WT5",
                                "rpoB wild type probe 5 rpoB WT5",
                            ),
                            (
                                "rpoB_wild_type_probe_6_rpoB_WT6",
                                "rpoB wild type probe 6 rpoB WT6",
                            ),
                            (
                                "rpoB_wild_type_probe_7_rpoB_WT7",
                                "rpoB wild type probe 7 rpoB WT7",
                            ),
                            (
                                "rpoB_wild_type_probe_8_rpoB_WT8",
                                "rpoB wild type probe 8 rpoB WT8",
                            ),
                            (
                                "rpoB_mutation_probe_1_rpoB_MUT1",
                                "rpoB mutation probe 1 rpoB MUT1",
                            ),
                            (
                                "rpoB_mutation_probe_2A_rpoB_MUT2A",
                                "rpoB mutation probe 2A rpoB MUT2A",
                            ),
                            (
                                "rpoB_mutation_probe_2B_rpoB_MUT2B",
                                "rpoB mutation probe 2B rpoB MUT2B",
                            ),
                            ("mutation_probe_3_rpoB_MUT3", "mutation probe 3 rpoB MUT3"),
                            ("katG_locus_control_katG", "katG Locus Control katG"),
                            ("katG_wild_type_probe_katG_WT", "katG wild type probe katG WT"),
                            ("mutation_probe_1_katG_MUT1", "mutation probe 1 katG MUT1"),
                            (
                                "katG_mutation_probe_2_katG_MUT2",
                                "katG mutation probe 2 katG MUT2",
                            ),
                            ("inhA_locus_control_inhA", "inhA Locus Control inhA"),
                            (
                                "inhA_wild_type_probe_1_inhA_WT1",
                                "inhA wild type probe 1 inhA WT1",
                            ),
                            (
                                "inhA_wild_type_probe_2_inhA_WT2",
                                "inhA wild type probe 2 inhA WT2",
                            ),
                            (
                                "inhA_mutation_probe_1_inhA_MUT1",
                                "inhA mutation probe 1 inhA MUT1",
                            ),
                            (
                                "inhA_mutation_probe_2_inhA_MUT2",
                                "inhA mutation probe 2 inhA MUT2",
                            ),
                            (
                                "inhA_mutation_probe_3A_inhA_MUT3A",
                                "inhA mutation probe 3A inhA MUT3A",
                            ),
                            (
                                "inhA_mutation_probe_3B_inhA_MUT3B",
                                "inhA mutation probe 3B inhA MUT3B",
                            ),
                        ],
                        max_length=125,
                        verbose_name="Line probe assay (1st line drugs). (GenoType MTBDRplus V2). Indicate bands visible on the strip",
                    ),
                ),
                (
                    "genotype_mtbdrsi",
                    models.CharField(
                        choices=[
                            ("Conjugate_Control", "Conjugate Control"),
                            ("amplification_control", "Amplification Control"),
                            ("m_tuberculosis_complex_TUB", "M. tuberculosis complex TUB"),
                            ("gyrA_locus_control_gyrA", "gyrA Locus Control gyrA"),
                            (
                                "gyrA_wild_type_probe_1_gyrA_WT1",
                                "gyrA wild type probe 1 gyrA WT1",
                            ),
                            (
                                "gyrA_wild_type_probe_2_gyrA_WT2",
                                "gyrA wild type probe 2 gyrA WT2",
                            ),
                            (
                                "gyrA_wild_type_probe_3 gyrA_WT3",
                                "gyrA wild type probe 3 gyrA WT3",
                            ),
                            (
                                "gyrA_mutation_probe_1_gyrA_MUT1",
                                "gyrA mutation probe 1 gyrA MUT1",
                            ),
                            (
                                "gyrA_mutation_probe_2_gyrA_MUT2",
                                "gyrA mutation probe 2 gyrA MUT2",
                            ),
                            (
                                "gyrA_mutation_probe_3A_gyrA MUT3A",
                                "gyrA mutation probe 3A gyrA MUT3A",
                            ),
                            (
                                "gyrA_mutation_probe_3B_gyrA MUT3B",
                                "gyrA mutation probe 3B gyrA MUT3B",
                            ),
                            (
                                "gyrA_mutation_probe_3C_gyrA MUT3C",
                                "gyrA mutation probe 3C gyrA MUT3C",
                            ),
                            (
                                "gyrA_mutation_probe_3D_gyrA MUT3D",
                                "gyrA mutation probe 3D gyrA MUT3D",
                            ),
                            ("gyrB_Locus_Control_gyrB", "gyrB Locus Control gyrB"),
                            ("gyrB_wild_type_probe_gyrB_WT", "gyrB wild type probe gyrB WT"),
                            (
                                "gyrB_mutation_probe_1_gyrB_MUT1",
                                "gyrB mutation probe 1 gyrB MUT1",
                            ),
                            (
                                "gyrB_mutation_probe_2_gyrB_MUT2",
                                "gyrB mutation probe 2 gyrB MUT2",
                            ),
                            ("rrs_Locus_Control_rrs", "rrs Locus Control rrs"),
                            ("rrs_wild_type_probe_1_rrs_WT1", "rrs wild type probe 1 rrs WT1"),
                            ("rrs_wild_type_probe_2_rrs_WT2", "rrs wild type probe 2 rrs WT2"),
                            ("rrs_mutation_probe_1_rrs_MUT1", "rrs mutation probe 1 rrs MUT1"),
                            ("rrs_mutation_probe_2_rrs_MUT2", "rrs mutation probe 2 rrs MUT2"),
                            ("eis_locus_control_eis", "eis Locus Control eis"),
                            ("eis_wild_type_probe_1_eis_WT1", "eis wild type probe 1 eis WT1"),
                            ("eis_wild_type_probe_2_eis_WT2", "eis wild type probe 2 eis WT2"),
                            ("eis_wild_type_probe_3_eis_WT3", "eis wild type probe 3 eis WT3"),
                            ("eis_mutation_probe_1_eis_MUT", "eis mutation probe 1 eis MUT"),
                        ],
                        max_length=125,
                        verbose_name="Line probe assay (2nd line drugs).(GenoType MTBDRsl V2). Indicate bands visible on the strip",
                    ),
                ),
                (
                    "nanopore_version_number",
                    models.CharField(max_length=45, verbose_name="Version number"),
                ),
                (
                    "nanopore_lot_number",
                    models.CharField(max_length=45, verbose_name="Lot number"),
                ),
                (
                    "nanopore_resistance_detected",
                    models.TextField(
                        verbose_name="Specify drug resistance mutations detected"
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Drug susceptibility Test",
                "verbose_name_plural": "Drug susceptibility Test",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
            },
            managers=[
                ("on_site", django.contrib.sites.managers.CurrentSiteManager()),
                ("objects", edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name="DiagnosticTests",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                ("sample_type_a", models.CharField(max_length=85, verbose_name="Sample type")),
                (
                    "xpert_mtb_rif_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Xpert MTB/RIF (Ultra)",
                    ),
                ),
                (
                    "truenat_mtb_plus_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Truenat MTB Plus",
                    ),
                ),
                (
                    "culture_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Culture MGIT/LJ",
                    ),
                ),
                (
                    "smear_microscopy_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Smear microscopy\tdirect ZN/FM",
                    ),
                ),
                (
                    "mods_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="MODS",
                    ),
                ),
                (
                    "other_test_a",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "other_test_result_a",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Test result",
                    ),
                ),
                ("sample_type_b", models.CharField(max_length=85, verbose_name="Sample type")),
                (
                    "xpert_mtb_rif_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Xpert MTB/RIF (Ultra)",
                    ),
                ),
                (
                    "truenat_mtb_plus_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Truenat MTB Plus",
                    ),
                ),
                (
                    "culture_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Culture MGIT/LJ",
                    ),
                ),
                (
                    "smear_microscopy_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Smear microscopy\tdirect ZN/FM",
                    ),
                ),
                (
                    "mods_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="MODS",
                    ),
                ),
                (
                    "other_test_b",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "other_test_result_b",
                    models.CharField(
                        choices=[
                            ("N/A", "Not applicable"),
                            ("positive", "positive"),
                            ("negative", "negative"),
                            ("no_result", "no result"),
                        ],
                        max_length=45,
                        verbose_name="Test result",
                    ),
                ),
                (
                    "remarks",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Any remarks on any of the laboratory procedures above",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Diagnostic Tests",
                "verbose_name_plural": "Diagnostic Tests",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
            },
            managers=[
                ("on_site", django.contrib.sites.managers.CurrentSiteManager()),
                ("objects", edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name="DiagnosisCrf",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("consent_model", models.CharField(editable=False, max_length=50, null=True)),
                (
                    "consent_version",
                    models.CharField(editable=False, max_length=10, null=True),
                ),
                (
                    "crf_status",
                    models.CharField(
                        choices=[
                            ("INCOMPLETE", "Incomplete (some data pending)"),
                            ("COMPLETE", "Complete"),
                        ],
                        default="INCOMPLETE",
                        help_text="If some data is still pending, flag this CRF as incomplete",
                        max_length=25,
                        verbose_name="CRF status",
                    ),
                ),
                (
                    "crf_status_comments",
                    models.TextField(
                        blank=True,
                        help_text="for example, why some data is still pending",
                        null=True,
                        verbose_name="Any comments related to status of this CRF",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edcs_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "TB_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was a TB diagnosis made?",
                    ),
                ),
                (
                    "TB_dx_made",
                    models.CharField(
                        choices=[
                            (
                                "signs_symptoms_only",
                                "Based on clinical signs and symptoms only ",
                            ),
                            (
                                "signs_symptoms_bacteriology",
                                "Based a combination of signs, symptoms and bacteriology",
                            ),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="How was the TB diagnosis made?",
                    ),
                ),
                (
                    "TB_dx_made_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "TB_dx_xpert_truenat_nga",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="On what test result(s) was the bacteriological diagnosis based on Xpert/Truenat on sputum/NGA?",
                    ),
                ),
                (
                    "TB_dx_xpert_truenat_nga_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Date (Xpert/Truenat on sputum/NGA) result received by clinician",
                    ),
                ),
                (
                    "TB_dx_other_tests",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Other test(s) with respective dates?",
                    ),
                ),
                (
                    "info_TB_dx_made_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "TB_treatment_start",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("referred_treatment", "Patient referred for treatment"),
                            ("not_started", "Not started"),
                        ],
                        max_length=45,
                        verbose_name="Was TB treatment started?",
                    ),
                ),
                (
                    "TB_treatment_start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="If yes, treatment start date?"
                    ),
                ),
                (
                    "health_facility",
                    models.CharField(
                        blank=True,
                        max_length=45,
                        null=True,
                        verbose_name="If referred  for treatment, name of the health facility?",
                    ),
                ),
                (
                    "reason_not_started",
                    models.TextField(
                        blank=True, null=True, verbose_name="If Not started, specify reasons?"
                    ),
                ),
                (
                    "treatment_regimen",
                    models.CharField(
                        choices=[
                            ("ds_tb", "DS TB regimen (2RHZE and 4RH)"),
                            ("dr_tb", "DR TB long regimen"),
                            ("dr_short", "DR Short regimen"),
                            ("individual_regimen", "Individualized regimen"),
                        ],
                        max_length=45,
                        verbose_name="What treatment regimen was prescribed?",
                    ),
                ),
                (
                    "treatment_regimen_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "treatment_based_result",
                    models.CharField(
                        choices=[
                            (
                                "not_based_result",
                                "Treatment regimen was not based on a test result",
                            ),
                            ("phenotypic_dst", "Phenotypic DST"),
                            ("smear_afb", "Smear AFB microscopy"),
                            ("xpert_ultra", "Xpert Ultra"),
                            ("culture", "Culture"),
                            ("xpert_xdr", "Xpert XDR"),
                            ("1nd_line_drugs", "Line probe assay (1st line drugs)"),
                            ("2nd_line_drugs", "Line probe assay (2nd line drugs)"),
                            ("sequencing", "Sequencing"),
                            ("OTHER", "Other"),
                        ],
                        max_length=45,
                        verbose_name="On what test result was the treatment regimen based and when did this test result become available to you? ",
                    ),
                ),
                (
                    "treatment_based_result_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "regimen_changed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=45,
                        verbose_name="Was the regimen changed during the treatment?",
                    ),
                ),
                (
                    "regimen_changed_no",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="If yes, How many times regimen changed during the treatment?",
                    ),
                ),
                (
                    "regimen_change1_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                (
                    "regimen_change1",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Change introduced to the regimen",
                    ),
                ),
                (
                    "regimen_change1_reasons",
                    models.TextField(blank=True, null=True, verbose_name="Reason for change?"),
                ),
                (
                    "regimen_change2_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                (
                    "regimen_change2",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Change introduced to the regimen",
                    ),
                ),
                (
                    "regimen_change2_reasons",
                    models.TextField(blank=True, null=True, verbose_name="Reason for change?"),
                ),
                (
                    "regimen_change3_date",
                    models.DateField(blank=True, null=True, verbose_name="Date"),
                ),
                (
                    "regimen_change3",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Change introduced to the regimen",
                    ),
                ),
                (
                    "regimen_change3_reasons",
                    models.TextField(blank=True, null=True, verbose_name="Reason for change?"),
                ),
                (
                    "treatment_outcome",
                    models.CharField(
                        choices=[
                            ("cured", "Cured"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("lost_followup", "Lost-to-follow-up"),
                            ("died", "Died"),
                        ],
                        max_length=15,
                        verbose_name="Treatment outcome at the end of treatment?",
                    ),
                ),
                (
                    "other_dx_pneumonia",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="If Bacterial pneumonia, please specify causative species if known?",
                    ),
                ),
                (
                    "other_dx_other",
                    edcs_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "other_disease",
                    models.CharField(
                        max_length=115, verbose_name="How was this diagnosis made?"
                    ),
                ),
                (
                    "info_TB_dx_made",
                    models.ManyToManyField(
                        to="edcs_lists.infotbdxmade",
                        verbose_name="In case TB was diagnosed clinically, based on what information was the diagnosis made?",
                    ),
                ),
                (
                    "other_dx",
                    models.ManyToManyField(
                        to="edcs_lists.otherdxmade",
                        verbose_name="What diagnosis other than TB was made?",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_visit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="edcs_subject.subjectvisit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Diagnosis CRF",
                "verbose_name_plural": "Diagnosis CRF",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
            },
            managers=[
                ("on_site", django.contrib.sites.managers.CurrentSiteManager()),
                ("objects", edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.AddIndex(
            model_name="subjectvisit",
            index=models.Index(
                fields=[
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "visit_code",
                    "visit_code_sequence",
                    "report_datetime",
                ],
                name="edcs_subjec_subject_83dd4b_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="subjectvisit",
            unique_together={
                (
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "report_datetime",
                ),
                (
                    "subject_identifier",
                    "visit_schedule_name",
                    "schedule_name",
                    "visit_code",
                    "visit_code_sequence",
                ),
            },
        ),
        migrations.AddIndex(
            model_name="respiratorysample",
            index=models.Index(
                fields=["subject_visit", "site", "id"], name="edcs_subjec_subject_6587a6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollmentcrf",
            index=models.Index(
                fields=["subject_visit", "site", "id"], name="edcs_subjec_subject_fe835f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="drugsusceptibilitytests",
            index=models.Index(
                fields=["subject_visit", "site", "id"], name="edcs_subjec_subject_f1b88c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="diagnostictests",
            index=models.Index(
                fields=["subject_visit", "site", "id"], name="edcs_subjec_subject_114db4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="diagnosiscrf",
            index=models.Index(
                fields=["subject_visit", "site", "id"], name="edcs_subjec_subject_3e5557_idx"
            ),
        ),
    ]
